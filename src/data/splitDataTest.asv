function [XTestOut, YTestOut, labelsTestOut] = splitDataTest(data, labels, windowSize, modelType, dataType, isMultivariate)
%SPLITDATATEST
%
% Splits the data for testing using the sliding window

% TODO: this function can be way simpler

if ~isMultivariate
    % For univariate models
    numChannels = size(data{1, 1}, 2);
    numOfWindows = round((size(data{1, 1}, 1) - windowSize));
    
    XTestOut = cell(1, numChannels);
    YTestOut = cell(1, numChannels);
    labelsTestOut = [];
    
    % Get XTest and YTest for each channel of the test data
    for ch_idx = 1:numChannels
        XTest_c = [];
        YTest_c = [];
      
        if dataType == 1
            XTestTmp = zeros(numOfWindows, windowSize);
            for j = 1:numOfWindows
                XTestTmp(j, :) = data{1, 1}(j:(j + windowSize), ch_idx);
            end
        elseif dataType == 2
            XTestTmp = cell(numOfWindows, 1);
            for j = 1:numOfWindows
                XTestTmp{j, 1} = data{1, 1}(j:(j + windowSize), ch_idx)';
            end
        elseif dataType == 3
            XTestTmp = cell(numOfWindows, 1);
            for j = 1:numOfWindows
                XTestTmp{j, 1} = data{1, 1}(j:(j + windowSize), ch_idx);
            end
        end
    
        XTest_c = [XTest_c; XTestTmp];
        
        % YTest
        if strcmp(modelType, 'predictive')
            YTestTmp = zeros(numOfWindows, 1);
            for j = 1:numOfWindows
                YTestTmp(j, 1) = data{1, 1}((j + windowSize), ch_idx);
            end
        else
            YTestTmp = zeros(numOfWindows, 1);
            for j = 1:(numOfWindows - windowSize)
                YTestTmp(j, 1) = data{1, 1}((j + windowSize - 1), ch_idx);
            end
        end
    
        YTest_c = [YTest_c; YTestTmp];        
    
        XTestOut{1, ch_idx} = XTest_c;
        YTestOut{1, ch_idx} = YTest_c;
    end

    % Get labels
    if strcmp(modelType, 'predictive')    
        labelsTestTmp = logical(labels{1, 1}((windowSize + 1):end, 1));
    else
        labelsTestTmp = logical(labels{1, 1}((windowSize):(end - windowSize), 1));
    end

    labelsTestOut = [labelsTestOut; labelsTestTmp];
else
    % For multivariate models
    numOfWindows = round((size(data{1, 1}, 1) - windowSize));
    
    labelsTestOut = [];
    
    % Get XTest and YTest for each channel of the test data
    XTest = [];
    YTest = [];
  
    XTestTmp = cell(numOfWindows, 1);
    for j = 1:numOfWindows
        XTestTmp{j, 1} = data{1, 1}(j:(j + windowSize), :)';
    end

    XTest = [XTest; XTestTmp];
    
    % YTest
    if strcmp(modelType, 'predictive')
        YTestTmp = zeros(numOfWindows, 1);
        for j = 1:numOfWindows
            YTestTmp(j, 1) = data{1, 1}((j + windowSize), :);
        end
    else
        YTestTmp = zeros(numOfWindows, 1);
        for j = 1:(numOfWindows - windowSize)
            YTestTmp(j, 1) = data{1, 1}((j + windowSize - 1), :);
        end
    end

    YTest = [YTest; YTestTmp];

    % Get labels
    labelsTestOut = [];
    
    if strcmp(modelType, 'predictive')    
        labelsTestTmp = logical(labels{1, 1}((windowSize + 1):end, 1));
    else
        labelsTestTmp = logical(labels{1, 1}((windowSize):(end - windowSize), 1));
    end

    labelsTestOut = [labelsTestOut; labelsTestTmp];







    numChannels = size(data{1, 1}, 2);
    numOfWindows = round((size(data{1, 1}, 1) - windowSize));
    
    XTestOut = cell(1, numChannels);
    YTestOut = cell(1, numChannels);
    labelsTestOut = [];
    
    % Get XTest and YTest for each channel of the test data
    for ch_idx = 1:numChannels
        XTest_c = [];
        YTest_c = [];
     
        % XTest
        dataTmp = data{1, 1};
        XTestLag = lagmatrix(dataTmp(:, ch_idx), 1:windowSize);
        XTestAll = XTestLag((windowSize + 1):end, :);
        
        if dataType == 1
            XTestTmp = zeros(numOfWindows, windowSize);
            for j = 1:numOfWindows
                XTestTmp(j, :) = flip(XTestAll(j, :));
            end
        elseif dataType == 2
            XTestTmp = cell(numOfWindows, 1);
            for j = 1:numOfWindows
                XTestTmp{j, 1} = flip(XTestAll(j, :));
            end
        elseif dataType == 3
            XTestTmp = cell(numOfWindows, 1);
            for j = 1:numOfWindows
                XTestTmp{j, 1} = flip(XTestAll(j, :))';
            end
        end
    
        XTest_c = [XTest_c; XTestTmp];
        
        % YTest
        if strcmp(modelType, 'predictive')
            YTestCell = data{1, 1};
            YTestAll = YTestCell((windowSize + 1):end, ch_idx);
    
            YTestTmp = zeros(numOfWindows, 1);
            
            for j = 1:numOfWindows
                YTestTmp(j, 1) = YTestAll(j, :)';
            end
        else
            YTestCell = data{1, 1};
            YTestAll = YTestCell(windowSize:(end - windowSize), ch_idx);                  
            YTestTmp = zeros((numOfWindows - windowSize), 1);
    
            for j = 1:(numOfWindows - windowSize)
                YTestTmp(j, 1) = YTestAll(j, :)';
            end
        end
    
        YTest_c = [YTest_c; YTestTmp];        
    
        XTestOut{1, ch_idx} = XTest_c;
        YTestOut{1, ch_idx} = YTest_c;
    end
    
    % Get labels
    if strcmp(modelType, 'predictive')    
        labelsCell = labels{1, 1};
        labelsAll = labelsCell((windowSize + 1):end, 1);
        labelsTestTmp= zeros(numOfWindows, 1);
        
        for j = 1:numOfWindows
            labelsTestTmp(j, 1) = logical(labelsAll(j, :))';
        end
    else
        labelsCell = labels{1, 1};
        labelsAll = labelsCell(windowSize:(end - windowSize), 1);   
        labelsTestTmp = zeros((numOfWindows - windowSize), 1);
        
        for j = 1:(numOfWindows - windowSize)
            labelsTestTmp(j, 1) = logical(labelsAll(j, :))';
        end
    end

    labelsTestOut = [labelsTestOut; labelsTestTmp];

    XTest_tmp = cell(numOfWindows, 1);
    for i = 1:numOfWindows
        for j = 1:numChannels
            XTest_tmp{i, 1} = [XTest_tmp{i, 1}; XTestOut{1, j}{i, 1}];
        end
    end
    XTestOut = cell(1, 1);
    XTestOut{1, 1} = XTest_tmp;
    
    YTest_tmp = cell2mat(YTestOut);
    YTestOut = cell(1, 1);
    YTestOut{1, 1} = YTest_tmp;
end
end
