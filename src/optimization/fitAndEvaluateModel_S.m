function scoresCell = fitAndEvaluateModel_S(options, trainingData, trainingLabels, testValData, testValLabels, testingData, testingLabels, thresholds)
scoresCell = cell(size(testingData, 1), 1);


    XTrain = prepareDataTrain_S(options, trainingData);

    Mdl = trainS(options, XTrain);

    staticThreshold = getStaticThreshold_S(options, Mdl, XTrain, testValData, testValLabels, thresholds);
    
    fields = fieldnames(staticThreshold);
    selectedThreshold = staticThreshold.(fields{1});

    for dataIdx = 1:size(testingData, 1)
        [XTest, labels] = prepareDataTest_S(options, testingData(dataIdx, 1), testingLabels(dataIdx, 1));
        [anomalyScores, ~, labels] = detectWithS(options, Mdl, XTest, labels);
        
        labels_pred = calcStaticThresholdPrediction(anomalyScores, selectedThreshold);
        [scoresPointwise, scoresEventwise, scoresPointAdjusted, compositeFscore] = calcScores(labels_pred, labels);

       fullScores = [compositeFscore; ...
                        scoresPointwise(3); ...
                        scoresEventwise(3); ...
                        scoresPointAdjusted(3); ...
                        scoresPointwise(4); ...
                        scoresEventwise(4); ...
                        scoresPointAdjusted(4); ...
                        scoresPointwise(1); ...
                        scoresEventwise(1); ...
                        scoresPointAdjusted(1); ...
                        scoresPointwise(2); ...
                        scoresEventwise(2); ...
                        scoresPointAdjusted(2)];
        scoresCell{dataIdx, 1} = fullScores;
    end
end