function results = optimizeModel(optVars, model, dataTrain, labelsTrain, dataValTest, labelsValTest, dataTest, labelsTest, thresholds, dynamicThresholdSettings, cmpScore, iterations, trainingPlots, parallelEnabled)
%OPTIMIZEMODEL Runs the byesian optimization for a model
%   Sets the optVars, defines the opt_fun and calls the bayesopt function

optVariables = [];
optVarNames = fieldnames(optVars);
for opt_idx = 1:length(optVarNames)
    optVariables = [optVariables optimizableVariable(optVarNames{opt_idx}, ...
        optVars.(optVarNames{opt_idx}).value, 'Type', optVars.(optVarNames{opt_idx}).type)];
end

fun = @(x)opt_fun(model, ...
    dataTrain, ...
    labelsTrain, ...
    dataValTest, ...
    labelsValTest, ...
    dataTest, ...
    labelsTest, ...
    thresholds, ...
    dynamicThresholdSettings, ...
    cmpScore, ...
    x, ...
    trainingPlots);

results = bayesopt(fun, optVariables, Verbose=0,...
    AcquisitionFunctionName='expected-improvement-plus', ...
    MaxObjectiveEvaluations=iterations, ...
    IsObjectiveDeterministic=false, UseParallel=parallelEnabled);
end